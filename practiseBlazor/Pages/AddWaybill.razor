@page "/addWaybills"
@using practiseBlazor.DataAccess
@using practiseBlazor.Models
@inject NavigationManager Navigation

<EditForm Model="@_trip" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="Date">Date:</label>
        <InputDate id="Date" class="form-control" @bind-Value="_trip.Date"/>
    </div>

    <div class="form-group">
        <label for="ClientId">Client:</label>
        <InputSelect id="ClientId" class="form-control" @bind-Value="_trip.ClientId">
            <option value="">-- Select Client --</option>
            @foreach (var client in _clients)
            {
                <option value="@client.Id">@client.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="VehicleId">Vehicle:</label>
        <InputSelect id="VehicleId" class="form-control" @bind-Value="_trip.VehicleId">
            <option value="">-- Select Vehicle --</option>
            @foreach (var vehicle in _vehicles)
            {
                <option value="@vehicle.Id">@vehicle.LicensePlate</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="DriverId">Driver:</label>
        <InputSelect id="DriverId" class="form-control" @bind-Value="_trip.DriverId">
            <option value="">-- Select Driver --</option>
            @foreach (var driver in _drivers)
            {
                <option value="@driver.Id">@driver.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="RouteStart">Route Start:</label>
        <InputText id="RouteStart" class="form-control" @bind-Value="_trip.RouteStart"/>
    </div>

    <div class="form-group">
        <label for="RouteEnd">Route End:</label>
        <InputText id="RouteEnd" class="form-control" @bind-Value="_trip.RouteEnd"/>
    </div>

    <div class="form-group">
        <label for="Distance">Distance:</label>
        <InputNumber id="Distance" class="form-control" @bind-Value="_trip.Distance"/>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private Waybill _trip = new Waybill();
    private List<Client> _clients = new List<Client>();
    private List<Vehicle> _vehicles = new List<Vehicle>();
    private List<Driver> _drivers = new List<Driver>();

    protected override async Task OnInitializedAsync()
    {
        _clients = await GetClientsAsync();
        _vehicles = await GetVehiclesAsync();
        _drivers = await GetDriversAsync();
    }

    private async Task HandleValidSubmit()
    {
        string dateString = _trip.Date.ToString("yyyy-MM-ddTHH:mm:ss");

        string query = $@"
            mutation {{
              insertWaybill(
                date: ""{dateString}"",
                clientId: {_trip.ClientId},
                vehicleId: {_trip.VehicleId},
                driverId: {_trip.DriverId},
                routeStart: ""{_trip.RouteStart}"",
                routeEnd: ""{_trip.RouteEnd}"",
                distance: {_trip.Distance}
              ) {{
                id
              }}
            }}
        ";

        string queryType = "insertWaybill";

        await Query.ExecuteQueryAsync<Waybill>(queryType, query);
        Navigation.NavigateTo("/", true);
    }

    private async Task<List<Client>> GetClientsAsync()
    {
        string query = "query{clients{id, name}}";
        string queryType = "clients";
        var result = await Query.ExecuteQueryReturnListAsync<Client>(queryType, query);
        return result;
    }
    
    private async Task<List<Vehicle>> GetVehiclesAsync()
    {
        string query = "query{vehicles{id, licensePlate}}";
        string queryType = "vehicles";
        var result = await Query.ExecuteQueryReturnListAsync<Vehicle>(queryType, query);
        return result;
    }
    
    private async Task<List<Driver>> GetDriversAsync()
    {
        string query = "query{drivers{id, name}}";
        string queryType = "drivers";
        var result = await Query.ExecuteQueryReturnListAsync<Driver>(queryType, query);
        return result;
    }

}